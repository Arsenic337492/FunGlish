// ===== –¢–ï–ú–´ =====
document.addEventListener('DOMContentLoaded', function() {
  const themeToggle = document.getElementById('themeToggle');
  if (!themeToggle) return;
  
  themeToggle.addEventListener('click', () => {
    const isDark = !document.body.classList.contains('dark-theme');
    document.body.classList.toggle('dark-theme', isDark);
    document.body.classList.toggle('light-theme', !isDark);
    localStorage.setItem('theme', isDark ? 'dark' : 'light');
    themeToggle.textContent = isDark ? '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è' : 'üåô –¢—ë–º–Ω–∞—è';
  });

  // –ü—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-theme');
    themeToggle.textContent = '‚òÄÔ∏è –°–≤–µ—Ç–ª–∞—è';
  } else {
    document.body.classList.add('light-theme');
    themeToggle.textContent = 'üåô –¢—ë–º–Ω–∞—è';
  }
});

// ===== –¢–ï–ú–´ –ò –≠–§–§–ï–ö–¢–´ =====
document.addEventListener('DOMContentLoaded', function() {
  const themeToggle = document.getElementById('themeToggle');
  if (themeToggle) themeToggle.addEventListener('click', toggleTheme);
  applySavedTheme();
});

function toggleTheme() {
  const body = document.body;
  const isDark = body.classList.contains('dark-theme');
  body.classList.toggle('dark-theme', !isDark);
  body.classList.toggle('light-theme', isDark);
  localStorage.setItem('theme', isDark ? 'light' : 'dark');
  if (themeToggle) themeToggle.textContent = isDark ? 'üåô' : '‚òÄÔ∏è';
}

function applySavedTheme() {
  if (localStorage.getItem('theme') === 'dark') {
    document.body.classList.add('dark-theme');
    if (themeToggle) themeToggle.textContent = '‚òÄÔ∏è';
  } else {
    document.body.classList.add('light-theme');
    if (themeToggle) themeToggle.textContent = 'üåô';
  }
}

function showSuccessEffects() {
  if (typeof confetti === 'function') {
    confetti({
      particleCount: 100,
      spread: 70,
      origin: { y: 0.6 },
      colors: ['#FF80AB', '#4DD0E1', '#FFD54F']
    });
  }
  // –ó–≤—É–∫ "–ò–µ–π!" (—Ç–æ–ª—å–∫–æ –Ω–∞ learning.html)
  if (window.location.pathname.includes('learning.html')) {
    const audio = new Audio('https://assets.mixkit.co/sfx/preview/mixkit-correct-answer-tone-2870.mp3');
    audio.play().catch(e => console.log("–ó–≤—É–∫ –Ω–µ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥—ë–Ω: ", e));
  }
}

document.addEventListener('DOMContentLoaded', function() {
    const links = document.querySelectorAll('.tree-view a');
    
    links.forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            links.forEach(l => l.classList.remove('active'));
            this.classList.add('active');
            
            const contentId = this.getAttribute('data-content-id');
            currentIndex = 0;

            if (contentId === 'animals-material') {
                currentData = animalsData;
                showCard('–ñ–∏–≤–æ—Ç–Ω—ã–µ');
            } else if (contentId === 'food-material') {
                currentData = foodData;
                showCard('–ï–¥–∞');
            } else if (contentId === 'animals-test') {
                startTest(animalsData, '–ñ–∏–≤–æ—Ç–Ω—ã–µ');
            } else if (contentId === 'food-test') {
                startTest(foodData, '–ï–¥–∞');
            } else if (contentId.includes('-test')) {
                const content = document.getElementById('lesson-content');
                content.innerHTML = `
                    <div class="test-container">
                        <h2>–ò—Ç–æ–≥–æ–≤—ã–π —Ç–µ—Å—Ç: ${contentId.includes('animals') ? '–ñ–∏–≤–æ—Ç–Ω—ã–µ' : '–ï–¥–∞'}</h2>
                        <p>–¢–µ—Å—Ç –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...</p>
                    </div>
                `;
            }
        });
    });
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö
const animalsData = [
    { 
        imageSrc: 'IMG_20250430_092619_498.jpg', 
        word: 'Bull', 
        translation: '–ë—ã–∫', 
        association: '–ë—ã–∫ –µ—Å—Ç –±—É–ª–∫—É. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –±–æ–ª—å—à–æ–≥–æ –±—ã–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å –∞–ø–ø–µ—Ç–∏—Ç–æ–º –µ—Å—Ç —Å–≤–µ–∂—É—é –±—É–ª–∫—É.'
    },
    { 
        imageSrc: 'IMG_20250430_093403_754.jpg', 
        word: 'Beetle', 
        translation: '–ñ—É–∫', 
        association: '–ñ—É–∫ —Å –±–∏—Ç–æ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –∂—É–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –¥–µ—Ä–∂–∏—Ç –±–∏—Ç—É.'
    },
    { 
        imageSrc: 'IMG-20250428-WA0009.jpg', 
        word: 'Eagle', 
        translation: '–û—Ä–µ–ª', 
        association: '–û—Ä–µ–ª —Å–º–æ—Ç—Ä–∏—Ç –Ω–∞ –∏–≥–ª—É. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –æ—Ä–ª–∞, –∫–æ—Ç–æ—Ä—ã–π –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ —Ä–∞–∑–≥–ª—è–¥—ã–≤–∞–µ—Ç –∏–≥–ª—É.'
    },
    { 
        imageSrc: 'IMG-20250428-WA0014.jpg', 
        word: 'Ant', 
        translation: '–ú—É—Ä–∞–≤–µ–π', 
        association: '–ú—É—Ä–∞–≤–µ–π –¥–µ—Ä–∂–∏—Ç –∞–Ω—Ç–µ–Ω–Ω—É. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –º—É—Ä–∞–≤—å—è, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ—Å–µ—Ç —Ç–µ–ª–µ–≤–∏–∑–∏–æ–Ω–Ω—É—é –∞–Ω—Ç–µ–Ω–Ω—É.'
    },
    { 
        imageSrc: 'IMG_20250430_092617_980.jpg', 
        word: 'Bunny', 
        translation: '–ö—Ä–æ–ª–∏–∫', 
        association: '–ö—Ä–æ–ª–∏–∫ –∏–¥–µ—Ç –≤ –±–∞–Ω—é. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –∫—Ä–æ–ª–∏–∫–∞ —Å –ø–æ–ª–æ—Ç–µ–Ω—Ü–µ–º, –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –±–∞–Ω—é.'
    },
    { 
        imageSrc: 'IMG_20250430_092551_201.jpg', 
        word: 'Bear', 
        translation: '–ú–µ–¥–≤–µ–¥—å', 
        association: '–ú–µ–¥–≤–µ–¥—å —Å –±–∏—Ä–∫–æ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –º–µ–¥–≤–µ–¥—è, –Ω–∞ –∫–æ—Ç–æ—Ä–æ–º –≤–∏—Å–∏—Ç –±–æ–ª—å—à–∞—è –±–∏—Ä–∫–∞ —Å —Ü–µ–Ω–æ–π.'
    },
    { 
        imageSrc: 'IMG_20250430_093409_921.jpg', 
        word: 'Turkey', 
        translation: '–ò–Ω–¥–µ–π–∫–∞', 
        association: '–ò–Ω–¥–µ–π–∫–∞ –Ω–∞—Ç–∏—Ä–∞–µ—Ç –Ω–∞ —Ç–µ—Ä–∫–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –∏–Ω–¥–µ–π–∫—É, –∫–æ—Ç–æ—Ä–∞—è —á—Ç–æ-—Ç–æ –Ω–∞—Ç–∏—Ä–∞–µ—Ç –Ω–∞ —Ç–µ—Ä–∫–µ.'
    },
    { 
        imageSrc: 'IMG_20250430_092554_524.jpg', 
        word: 'Gopher', 
        translation: '–°—É—Å–ª–∏–∫', 
        association: '–°—É—Å–ª–∏–∫ –∏–≥—Ä–∞–µ—Ç –≤ –≥–æ–ª—å—Ñ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—É—Å–ª–∏–∫–∞ —Å –∫–ª—é—à–∫–æ–π –¥–ª—è –≥–æ–ª—å—Ñ–∞.'
    },
    { 
        imageSrc: 'IMG_20250430_093402_253.jpg', 
        word: 'Donkey', 
        translation: '–û—Å–µ–ª', 
        association: '–¢–æ–Ω–∫–∏–π –æ—Å–µ–ª. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –æ—á–µ–Ω—å —Ö—É–¥–æ–≥–æ, —Ç–æ–Ω–∫–æ–≥–æ –æ—Å–ª–∞.'
    },
    { 
        imageSrc: 'IMG_20250430_092611_874.png', 
        word: 'Seal', 
        translation: '–¢—é–ª–µ–Ω—å', 
        association: '–£ —Ç—é–ª–µ–Ω—è –º–Ω–æ–≥–æ —Å–∏–ª. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–∏–ª—å–Ω–æ–≥–æ —Ç—é–ª–µ–Ω—è, –ø–æ–¥–Ω–∏–º–∞—é—â–µ–≥–æ —Ç—è–∂–µ—Å—Ç–∏.'
    }
];

const foodData = [
    { 
        imageSrc: 'IMG_20250430_092546_303.jpg', 
        word: 'Porridge', 
        translation: '–ö–∞—à–∞', 
        association: '–ö–∞—à–∞ –≤ –ø–∞—Ä–∏–∂–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, –∫–∞–∫ –≤—ã –µ–¥–∏—Ç–µ –∫–∞—à—É –≤–æ–∑–ª–µ –≠–π—Ñ–µ–ª–µ–≤–æ–π –±–∞—à–Ω–∏.'
    },
    { 
        imageSrc: 'IMG_20250430_092616_187.png', 
        word: 'Cucumber', 
        translation: '–û–≥—É—Ä–µ—Ü', 
        association: '–û–≥—É—Ä–µ—Ü —Å –∫—Ä—é–∫–æ–º. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ –æ–≥—É—Ä–µ—Ü, –∫ –∫–æ—Ç–æ—Ä–æ–º—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω –∫—Ä—é–∫.'
    },
    { 
        imageSrc: 'IMG_20250430_092521_394.jpg', 
        word: 'Sausage', 
        translation: '–°–æ—Å–∏—Å–∫–∞', 
        association: '–°–æ—Å–∏—Å–∫–∞ —Å —Å–æ—Å–∫–æ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–æ—Å–∏—Å–∫—É, –∫–æ—Ç–æ—Ä–∞—è –¥–µ—Ä–∂–∏—Ç —Å–æ—Å–∫—É.'
    },
    { 
        imageSrc: 'IMG_20250430_092527_385.jpg', 
        word: 'Soda', 
        translation: '–ì–∞–∑–∏—Ä–æ–≤–∫–∞', 
        association: '–ì–∞–∑–∏—Ä–æ–≤–∫–∞ –≤ —Å–æ–¥–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å—Ç–∞–∫–∞–Ω –≥–∞–∑–∏—Ä–æ–≤–∫–∏ –≤ –ø–∞—á–∫–µ —Å–æ–¥—ã.'
    },
    { 
        imageSrc: 'IMG_20250430_092535_000.jpg', 
        word: 'Beetroot', 
        translation: '–°–≤–µ–∫–ª–∞', 
        association: '–°–≤–µ–∫–ª–∞ —Å –±–∏—Ç–æ–π. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–≤–µ–∫–ª—É, –¥–µ—Ä–∂–∞—â—É—é –±–µ–π—Å–±–æ–ª—å–Ω—É—é –±–∏—Ç—É.'
    },
    { 
        imageSrc: 'IMG_20250430_092539_239.jpg', 
        word: 'Seed', 
        translation: '–°–µ–º–µ—á–∫–∞', 
        association: '–°–µ–º–µ—á–∫–∞ —Å–∏–¥–∏—Ç –≤ –∫—Ä–µ—Å–ª–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–µ–º–µ—á–∫—É, –∫–æ—Ç–æ—Ä–∞—è —É–¥–æ–±–Ω–æ —Ä–∞—Å–ø–æ–ª–æ–∂–∏–ª–∞—Å—å –≤ –∫—Ä–µ—Å–ª–µ.'
    },
    { 
        imageSrc: 'IMG_20250430_092533_382.jpg', 
        word: 'Plum', 
        translation: '–°–ª–∏–≤–∞', 
        association: '–°–ª–∏–≤–∞ –≤ –ø–ª–∞–º–µ–Ω–∏. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ —Å–ª–∏–≤—É, –æ–∫—Ä—É–∂–µ–Ω–Ω—É—é –ø–ª–∞–º–µ–Ω–µ–º.'
    }
];

let currentData = [];
let currentIndex = 0;

function showCard(sectionName) {
    const content = document.getElementById('lesson-content');
    const item = currentData[currentIndex];

    content.innerHTML = `
        <div class="material-container">
            <h2>–†–∞–∑–¥–µ–ª: ${sectionName}</h2>
            <div class="word-card">
                <div class="word-header">
                    <h2>${item.word} <button class="speak-btn" onclick="speakWord('${item.word.split('[')[0].trim()}')" title="–ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø—Ä–æ–∏–∑–Ω–æ—à–µ–Ω–∏–µ">üîä</button></h2>
                    <div class="word-image">
                        <div class="image-frame">
                            <img src="${item.imageSrc}" alt="–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è –¥–ª—è —Å–ª–æ–≤–∞ ${item.translation}" onerror="this.style.display='none';this.parentNode.classList.add('error');">
                        </div>
                    </div>
                </div>
                <div class="word-content">
                    <h3>–ü–µ—Ä–µ–≤–æ–¥:</h3>
                    <p>${item.translation}</p>
                    
                    <h3>–ê—Å—Å–æ—Ü–∏–∞—Ü–∏—è:</h3>
                    <p>${item.association}</p>

                    <div class="navigation-buttons" style="display: flex; justify-content: space-between; margin-top: 20px;">
                        <button onclick="prevCard()" ${currentIndex === 0 ? 'disabled' : ''}>‚Üê –ü—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–ª–æ–≤–æ</button>
                        <button onclick="nextCard()" ${currentIndex === currentData.length - 1 ? 'disabled' : ''}>–°–ª–µ–¥—É—é—â–µ–µ —Å–ª–æ–≤–æ ‚Üí</button>
                    </div>
                </div>
            </div>
        </div>
    `;
}

// --- –û–∑–≤—É—á–∫–∞: –≤—ã–±–æ—Ä –≥–æ–ª–æ—Å–∞ ---
let selectedVoice = null;
function pickBestVoice() {
    if (!('speechSynthesis' in window)) return null;
    const synth = window.speechSynthesis;
    let voices = synth.getVoices();
    let googleVoice = voices.find(v => v.name.includes('Google US English'));
    if (googleVoice) return googleVoice;
    let enVoice = voices.find(v => v.lang && v.lang.startsWith('en'));
    if (enVoice) return enVoice;
    return voices[0] || null;
}
if ('speechSynthesis' in window) {
    window.speechSynthesis.onvoiceschanged = function() {
        selectedVoice = pickBestVoice();
    };
    setTimeout(() => { selectedVoice = pickBestVoice(); }, 100);
}

window.speakWord = function(word) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º mp3-—Ñ–∞–π–ª—ã —Å GitHub
    const fileName = word.toLowerCase() + '.mp3';
    const url = 'https://github.com/Arsenic337492/FunGlish/raw/refs/heads/main/' + fileName;
    let audio = new Audio(url);
    audio.play();
};

function nextCard() {
    if (currentIndex < currentData.length - 1) {
        currentIndex++;
        showCard(currentData === animalsData ? '–ñ–∏–≤–æ—Ç–Ω—ã–µ' : '–ï–¥–∞');
    }
}

function prevCard() {
    if (currentIndex > 0) {
        currentIndex--;
        showCard(currentData === animalsData ? '–ñ–∏–≤–æ—Ç–Ω—ã–µ' : '–ï–¥–∞');
    }
}

function startTest(sectionData, sectionName) {
    const shuffledData = [...sectionData].sort(() => Math.random() - 0.5).slice(0, 7);
    let currentQuestionIndex = 0;
    let score = 0;
    let lastUserAnswer = null;

    // –¢–∏–ø—ã –∑–∞–¥–∞–Ω–∏–π: 1 - –≤—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞, 2 - –≤–≤–æ–¥ —Å–ª–æ–≤–∞, 3 - —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ, 4 - –ø—Ä–∞–≤–¥–∞/–ª–æ–∂—å, 5 - –∞–Ω–∞–≥—Ä–∞–º–º–∞
    const questionTypes = [1, 2, 3, 4, 5];

    function shuffle(arr) {
        return arr.sort(() => Math.random() - 0.5);
    }

    function showQuestion() {
        const item = shuffledData[currentQuestionIndex];
        // –í—ã–±–∏—Ä–∞–µ–º —Ç–∏–ø –∑–∞–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ, –∫—Ä–æ–º–µ —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è (3), –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ
        let type = questionTypes[Math.floor(Math.random() * questionTypes.length)];
        if (currentQuestionIndex === 0) type = 3; // –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–≥–¥–∞ –ø–µ—Ä–≤—ã–º
        if (currentQuestionIndex === 1) type = 4; // –ü—Ä–∞–≤–¥–∞/–õ–æ–∂—å –≤—Ç–æ—Ä—ã–º
        if (currentQuestionIndex === 2) type = 5; // –ê–Ω–∞–≥—Ä–∞–º–º–∞ —Ç—Ä–µ—Ç—å–∏–º
        if (currentQuestionIndex === 3) type = 2; // –í–≤–æ–¥ —Å–ª–æ–≤–∞ —á–µ—Ç–≤–µ—Ä—Ç—ã–º
        if (currentQuestionIndex === 4) type = 1; // –ö–ª–∞—Å—Å–∏–∫–∞ –ø—è—Ç—ã–º

        const content = document.getElementById('lesson-content');
        if (type === 1) {
            // –ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∏–π –≤—ã–±–æ—Ä –ø–µ—Ä–µ–≤–æ–¥–∞
            const answers = shuffle([
                item.translation,
                ...sectionData.filter(d => d.translation !== item.translation).slice(0, 3).map(d => d.translation)
            ]);
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                    <div class="progress">–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${shuffledData.length}</div>
                    <div class="question">
                        <h3>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ "${item.word}"?</h3>
                        <div class="answers">
                            ${answers.map(answer => `<button onclick="checkAnswer('${answer}', '${item.translation}')">${answer}</button>`).join('')}
                        </div>
                    </div>
                </div>
            `;
            window.checkAnswer = function(selected, correct) {
                lastUserAnswer = selected;
                let isCorrect = selected === correct;
                showResult(isCorrect, correct, selected);
            };
        } else if (type === 2) {
            // –í–≤–æ–¥ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —Å–ª–æ–≤–∞ –ø–æ –ø–µ—Ä–µ–≤–æ–¥—É
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                    <div class="progress">–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${shuffledData.length}</div>
                    <div class="question">
                        <h3>–í–≤–µ–¥–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ "${item.translation}"</h3>
                        <input type="text" id="wordInput" autocomplete="off" style="font-size:1.2em; padding:8px; width:220px;">
                        <button onclick="checkInputAnswer()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    </div>
                </div>
            `;
            window.checkInputAnswer = function() {
                const val = document.getElementById('wordInput').value.trim().toLowerCase();
                const correct = item.word.split('[')[0].trim().toLowerCase();
                lastUserAnswer = val;
                const isCorrect = val === correct;
                showResult(isCorrect, correct, val);
            }
        } else if (type === 3) {
            // Drag and drop —Å–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            const words = shuffle(sectionData.map(d => d.word.split('[')[0].trim()));
            const translations = shuffle(sectionData.map(d => d.translation));
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                    <div class="progress">–°–æ–ø–æ—Å—Ç–∞–≤—å—Ç–µ —Å–ª–æ–≤–∞ –∏ –ø–µ—Ä–µ–≤–æ–¥—ã (–ø–µ—Ä–µ—Ç–∞—â–∏—Ç–µ —Å–ª–æ–≤–∞ –º—ã—à–∫–æ–π)</div>
                    <div class="matching-list" id="matchingList">
                        ${translations.map((t, i) => `
                            <div class="match-row" data-translation="${t}">
                                <div class="match-dropzone" data-index="${i}"></div>
                                <span style="margin-left:12px;">${t}</span>
                            </div>
                        `).join('')}
                    </div>
                    <div class="draggable-words" id="draggableWords" style="display:flex;gap:10px;flex-wrap:wrap;margin-bottom:20px;">
                        ${words.map(w => `
                            <div class="match-word" draggable="true" data-word="${w}"><span class="drag-handle">‚ãÆ‚ãÆ</span>${w}</div>
                        `).join('')}
                    </div>
                    <button type="button" onclick="checkMatchingDnD()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    <div class="matching-feedback" id="matchingFeedback"></div>
                </div>
            `;
            // Drag and drop logic
            const draggables = document.querySelectorAll('.match-word');
            const dropzones = document.querySelectorAll('.match-dropzone');
            let dragged = null;
            draggables.forEach(el => {
                el.addEventListener('dragstart', e => {
                    dragged = el;
                    setTimeout(() => el.classList.add('dragging'), 0);
                });
                el.addEventListener('dragend', e => {
                    dragged = null;
                    el.classList.remove('dragging');
                });
            });
            dropzones.forEach(zone => {
                zone.addEventListener('dragover', e => {
                    e.preventDefault();
                    zone.classList.add('over');
                });
                zone.addEventListener('dragleave', e => {
                    zone.classList.remove('over');
                });
                zone.addEventListener('drop', e => {
                    e.preventDefault();
                    zone.classList.remove('over');
                    if (dragged) {
                        // –ï—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å —Å–ª–æ–≤–æ, –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –æ–±—Ä–∞—Ç–Ω–æ
                        if (zone.firstChild) {
                            document.getElementById('draggableWords').appendChild(zone.firstChild);
                        }
                        zone.appendChild(dragged);
                        zone.classList.add('filled');
                    }
                });
            });
            // –ü–æ–∑–≤–æ–ª—è–µ—Ç –≤–µ—Ä–Ω—É—Ç—å —Å–ª–æ–≤–æ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø—É–ª
            document.getElementById('draggableWords').addEventListener('dragover', e => e.preventDefault());
            document.getElementById('draggableWords').addEventListener('drop', e => {
                e.preventDefault();
                if (dragged) {
                    document.getElementById('draggableWords').appendChild(dragged);
                }
            });
            window.checkMatchingDnD = function() {
                const rows = document.querySelectorAll('.match-row');
                let correct = 0;
                let total = rows.length;
                let userPairs = [];
                rows.forEach(row => {
                    const dropzone = row.querySelector('.match-dropzone');
                    const translation = row.getAttribute('data-translation');
                    const wordEl = dropzone.querySelector('.match-word');
                    let userWord = '';
                    if (wordEl) {
                        userWord = wordEl.getAttribute('data-word');
                        userPairs.push({word: userWord, translation});
                        const data = sectionData.find(d => d.word.split('[')[0].trim() === userWord);
                        if (data && data.translation === translation) {
                            correct++;
                        }
                    } else {
                        userPairs.push({word: '(–Ω–µ –≤—ã–±—Ä–∞–Ω–æ)', translation});
                    }
                });
                let isAllCorrect = correct === total;
                showResult(isAllCorrect, `${correct} –∏–∑ ${total} –ø—Ä–∞–≤–∏–ª—å–Ω–æ`, userPairs);
            }
        } else if (type === 4) {
            // –ü—Ä–∞–≤–¥–∞/–õ–æ–∂—å
            const isTrue = Math.random() > 0.5;
            let fakeTranslation = item.translation;
            if (!isTrue) {
                const other = sectionData.filter(d => d.translation !== item.translation);
                fakeTranslation = other[Math.floor(Math.random() * other.length)].translation;
            }
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                    <div class="progress">–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${shuffledData.length}</div>
                    <div class="question">
                        <h3>${item.word} ‚Äî ${fakeTranslation}</h3>
                        <div class="answers">
                            <button onclick="checkAnswer('${isTrue}', 'true')">–ü—Ä–∞–≤–¥–∞</button>
                            <button onclick="checkAnswer('${isTrue}', 'false')">–õ–æ–∂—å</button>
                        </div>
                    </div>
                </div>
            `;
            window.checkAnswer = function(selected, correct) {
                lastUserAnswer = (selected === 'true') ? '–ü—Ä–∞–≤–¥–∞' : '–õ–æ–∂—å';
                let isCorrect = (selected === correct);
                showResult(isCorrect, correct === 'true' ? '–ü—Ä–∞–≤–¥–∞' : '–õ–æ–∂—å', lastUserAnswer);
            };
        } else if (type === 5) {
            // –ê–Ω–∞–≥—Ä–∞–º–º–∞
            const word = item.word.split('[')[0].trim();
            const shuffled = shuffle(word.toLowerCase().split('')).join('');
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                    <div class="progress">–í–æ–ø—Ä–æ—Å ${currentQuestionIndex + 1} –∏–∑ ${shuffledData.length}</div>
                    <div class="question">
                        <h3>–°–æ–±–µ—Ä–∏—Ç–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ —Å–ª–æ–≤–æ –∏–∑ –±—É–∫–≤: <span class="anagram">${shuffled}</span></h3>
                        <input type="text" id="anagramInput" autocomplete="off" style="font-size:1.2em; padding:8px; width:220px;">
                        <button onclick="checkAnagram()">–ü—Ä–æ–≤–µ—Ä–∏—Ç—å</button>
                    </div>
                </div>
            `;
            window.checkAnagram = function() {
                const val = document.getElementById('anagramInput').value.trim().toLowerCase();
                const correct = word.toLowerCase();
                lastUserAnswer = val;
                showResult(val === correct, correct, val);
            }
        }
    }

    function showResult(isCorrect, correct, userAnswer) {
        if (isCorrect) showSuccessEffects(); // –î–æ–±–∞–≤–ª–µ–Ω –≤—ã–∑–æ–≤ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        const content = document.getElementById('lesson-content');
        let userBlock = '';
        if (Array.isArray(userAnswer)) {
            userBlock = `<div style="margin-top:10px;"><b>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:</b><ul>` +
                userAnswer.map(pair => `<li>${pair.word} ‚Äî ${pair.translation}</li>`).join('') +
                `</ul></div>`;
        } else if (typeof userAnswer === 'string' && userAnswer !== undefined && userAnswer !== null) {
            userBlock = `<div style="margin-top:10px;"><b>–í–∞—à –æ—Ç–≤–µ—Ç:</b> ${userAnswer || '(–ø—É—Å—Ç–æ)'}</div>`;
        }
        content.innerHTML = `
            <div class="test-container">
                <h2>–¢–µ—Å—Ç: ${sectionName}</h2>
                <div class="result ${isCorrect ? 'correct' : 'incorrect'}">
                    <h3>${isCorrect ? '–ü—Ä–∞–≤–∏–ª—å–Ω–æ!' : '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ!'}</h3>
                    <p>–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${correct}</p>
                    ${!isCorrect ? userBlock : ''}
                </div>
                <button onclick="nextQuestion()">–î–∞–ª–µ–µ</button>
            </div>
        `;
    }

    window.nextQuestion = function() {
        currentQuestionIndex++;
        if (currentQuestionIndex < shuffledData.length) {
            showQuestion();
        } else {
            const content = document.getElementById('lesson-content');
            const percentage = ((score / shuffledData.length) * 100).toFixed(1).replace('.', ',');
            let nextSectionBtn = '';
            if (sectionName === '–ñ–∏–≤–æ—Ç–Ω—ã–µ') {
                nextSectionBtn = `<button onclick="goToSection('food-material')">–î–∞–ª–µ–µ</button>`;
            } else if (sectionName === '–ï–¥–∞') {
                nextSectionBtn = `<button onclick="location.href='index.html'">–î–∞–ª–µ–µ</button>`;
            } else {
                nextSectionBtn = `<button onclick="location.href='index.html'">–î–∞–ª–µ–µ</button>`;
            }
            content.innerHTML = `
                <div class="test-container">
                    <h2>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!</h2>
                    <div class="final-score">
                        <h3>–í–∞—à —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${score} –∏–∑ ${shuffledData.length}</h3>
                        <p>${percentage}% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤</p>
                    </div>
                    ${nextSectionBtn}
                    <button onclick="restartTest()">–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ</button>
                </div>
            `;
        }
    };
    window.goToSection = function(contentId) {
        // –ò–º–∏—Ç–∏—Ä—É–µ–º –∫–ª–∏–∫ –ø–æ –Ω—É–∂–Ω–æ–º—É –ø—É–Ω–∫—Ç—É –º–µ–Ω—é
        const link = document.querySelector(`[data-content-id="${contentId}"]`);
        if (link) link.click();
    };
    window.restartTest = function() {
        startTest(sectionData, sectionName);
    };

    showQuestion();
}
